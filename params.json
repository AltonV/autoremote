{"name":"Autoremote","tagline":"A ruby gem for interacting with autoremote devices","body":"# Autoremote\r\n[![Licence](https://img.shields.io/badge/license-MIT-blue.svg)][licence]\r\n[![Gem Version](http://img.shields.io/gem/v/autoremote.svg)][gem]\r\n[![Dependency Status](http://img.shields.io/gemnasium/AltonV/autoremote.svg)][gemnasium]\r\n[![Gem Downloads](https://img.shields.io/gem/dt/autoremote.svg)][gem]\r\n[![Code Climate](https://codeclimate.com/github/AltonV/autoremote/badges/gpa.svg)][codeclimate]\r\n[![Coverage Status](https://coveralls.io/repos/AltonV/autoremote/badge.svg)][coveralls]\r\n[![Inline docs](http://inch-ci.org/github/AltonV/autoremote.svg?branch=master&style=shields)][inch-ci]\r\n\r\n[licence]: http://choosealicense.com/licenses/mit/\r\n[gem]: https://rubygems.org/gems/autoremote\r\n[gemnasium]: https://gemnasium.com/AltonV/autoremote\r\n[codeclimate]: https://codeclimate.com/github/AltonV/autoremote\r\n[coveralls]: https://coveralls.io/r/AltonV/autoremote\r\n[inch-ci]: http://inch-ci.org/github/AltonV/autoremote\r\n\r\nA library that makes it easier to interact with your other autoremote devices.  \r\nThis project incudes both a library and an executable that uses the library.\r\n\r\nDevices are saved with sqlite3 in ~/.autoremote/devices.db\r\n\r\nIf you don't know how to get your personal key [follow this link](http://joaoapps.com/autoremote/personal/)  \r\nSince version 0.1.0 you can use the goo.gl url instead of the key when adding devices.  \r\n\r\n## Installation\r\n\r\n    $ gem install autoremote\r\n\r\n## Usage\r\n\r\n### Executable\r\n    $ autoremote add NAME KEY|URL        Save device\r\n    $ autoremote remove NAME             Removes device\r\n    $ autoremote delete NAME             Same as above\r\n    $ autoremote list [WITHKEY]          Lists all devices. Displays keys if WITHKEY equals to true, t, yes, y, ja, j or 1\r\n    $ autoremote message NAME MESSAGE    Send a message to a device\r\n    $ autoremote register NAME HOST      Register this computer to the device\r\n\r\n### Library\r\n\r\n```ruby\r\nrequire 'autoremote'\r\n\r\n# Adding devices can be done either with the key\r\nAutoRemote.add_device( name, \"A VERY LONG STRING OF CHARACTERS\" )\r\n# Or with your 'goo.gl' address\r\nAutoRemote.add_device( name, \"http://goo.gl/XXXXXX\" )\r\n\r\n# Removes a device\r\nAutoRemote.remove_device( name )\r\n\r\n# List all saved devices\r\nAutoRemote.list\r\n\r\n# Get a specific device\r\nAutoRemote.get_device( name )\r\n\r\n# Send a message to a device\r\n# The parameter device can either be a Device object or the name of the device\r\nAutoRemote.send_message( device, message )\r\n\r\n# Register on the device.\r\n# This has the same effect as following the guide on http://joaoapps.com/autoremote/linux/)\r\n# device can either be a Device object or the name of the device\r\n# host can be either a hostname or ip-address, but they have to be public (i.e. reachable from the internet)\r\nAutoRemote.register_on_device( device, host )\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/AltonV/autoremote/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n","google":"UA-30512782-2","note":"Don't delete this file! It's used internally to help with page regeneration."}