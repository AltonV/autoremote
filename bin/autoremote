#!/usr/bin/env ruby
require 'autoremote'
require 'rbconfig'

def to_bool(string)
    return false if string.class == NilClass || string.empty? || string.downcase =~ (/^(false|f|no|n|nej|0)$/i)
    return true if string.downcase =~ (/^(true|t|yes|y|ja|j|1)$/i)
    raise ArgumentError, "Invalid value: #{string}"
end

# Prints the header for the list of devices
def print_list_head(withkey)
    puts 'Listing devices'

    print 'Name'.rjust(18)
    print '  Key' if withkey
    puts

    print '--------'.rjust(18)
    print '  --------' if withkey
    puts
end

## Prints help
def print_help
    puts 'AutoRemote v' + AutoRemote::VERSION
    puts "\nArguments:"
    puts '    add DEVICE KEY|URL         Save device either with a \'goo.gl\' url or personal key'
    puts '    remove DEVICE              Removes device'
    puts '    delete DEVICE              Same as above'
    puts '    list [WITHKEY]             Lists all devices'
    puts '    message DEVICE MESSAGE     Send a message to a device'
    puts '    register DEVICE HOST       Register this computer to the device'
    exit()
end

arg0 = ARGV[0].downcase if ARGV[0]

# Prints help
if arg0 == 'help' || arg0 == '-h' || arg0 == '--help'
    print_help

# Add device
elsif arg0 == 'add' && ARGV[1] && ARGV[2]

    puts 'Adding device'
    begin
        if AutoRemote.addDevice(ARGV[1], ARGV[2])
            puts 'Device added successfully'
        else
            puts 'Device already exists'
        end
    rescue StandardError => e
        puts "Error: #{e.message}"
    end

# Remove device
elsif ( arg0 == 'remove' || arg0 == 'delete' ) && ARGV[1]

    puts 'Removing device'
    begin
        if AutoRemote.removeDevice(ARGV[1])
            puts 'Device removed successfully'
        else
            puts 'Device was not found'
        end
    rescue StandardError => e
        puts "Error: #{e.message}"
    end

# List all devices
elsif arg0 == 'list'

    withkey = to_bool(ARGV[1])
    print_list_head(withkey)

    AutoRemote.listDevices.each do|device|
        print "#{device.name}".rjust(18)
        print "  #{device.key}" if withkey
        puts
    end

# Send a message to a device
elsif arg0 == 'message' && ARGV[1] && ARGV[2]

    begin
        if AutoRemote.sendMessage(ARGV[1], ARGV[2])
            puts 'Message sent successfully'
        else
            puts 'Message could not be sent'
        end
    rescue StandardError => e
        puts "Error: #{e.message}"
    end

# Register on a device
elsif arg0 == 'register' && ARGV[1] && ARGV[2]

    # Display a prompt if registering on windows
    if RbConfig::CONFIG['host_os'] =~ /mswin|msys|mingw|cygwin|bccwin|wince|emc/i
        puts 'Are you sure you want to register a windows computer?'
        print 'You will need an SSH server on the computer. (y/n)'
        unless to_bool($stdin.gets.chomp)
            puts 'Registering interrupted'
            exit
        end
    end

    begin
        if AutoRemote.registerOnDevice(ARGV[1], ARGV[2])
            puts 'Device registered successfully'
        else
            puts 'Could not register computer on the device'
        end
    rescue StandardError => e
        puts "Error: #{e.message}"
    end

# Display help if arguments are invalid
else
    print_help
end
